# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.define "vagrant-debian" do | debian |
    debian.vm.box = "debian/stretch64"
    debian.vm.hostname = "vagrant-debian"
    # Create a private network, which allows host-only access to the machine
    # using a specific IP.
    debian.vm.network "private_network", ip: "192.168.50.11"
  end

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder ".", "/vagrant"

  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    # vb.gui = true
  
    # Customize the amount of memory on the VM:
    vb.memory = "1024"
    
  end
  #
  # Insall ansible in the VM as there is an issue with python version which vagrant chooses.
  # Un comment for ansible_local
  # config.vm.provision "shell", inline: "pip3 install ansible==2.10.7"
  config.vm.provision "ansible" do |ansible|
    ansible.playbook = "provisioning/playbook.yml"
    ansible.verbose = true
    ansible.inventory_path = "provisioning/inventory"
    ansible.config_file = "provisioning/ansible.cfg"
    
    # Un comment for ansible_local
    # ansible.install = false
    # ansible.extra_vars = { ansible_python_interpreter:"/usr/bin/python3" }
  end
end
